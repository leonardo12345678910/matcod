/*reflexãoR2*/
/*ALGORITMO QUE RECEBE COMO ENTRADAS UM VETOR BIDIMENSIONAL E A IN-
CLINAÇÃO DE UMA RETA QUE PASSA PELA ORIGEM NO PLANO XY, E RETORNA A 
REFLEXÃO DO VETOR DE ENTRADA EM TORNO DESSA RETA.*/

/*Entradas: vetor x, bidimensional e de números reais, e variável 
float a, que representa a inclinação da reta que passa pela origem*/
/*Saída: vetor y, bidimensional e de números reais, que é a reflexão 
de x em torno da reta de inclinação a*/

INÍCIO
    y <- matrizNula(2,1)
    y(1) <- x(1)*(1-a^2)/(1+a^2) + x(2)*2*a/(1+a^2)
    y(2) <- x(1)*2*a/(1+a^2) - x(2)*(1-a^2)/(1+a^2)

    Se abs(y(1)) < 10^(-6) Então      //correção de erros por arredondamento
        y(1) <- 0
    Se abs(y(2)) < 10^(-6) Então      //correção de erros por arredondamento
        y(2) <- 0
FIM

/*projeçãoR2*/
/*ALGORITMO QUE RECEBE COMO ENTRADAS UM VETOR BIDIMENSIONAL E A IN-
CLINAÇÃO DE UMA RETA QUE PASSA PELA ORIGEM NO PLANO XY, E RETORNA A 
PROJEÇÃO DO VETOR DE ENTRADA EM TORNO DESSA RETA.*/

/*Entradas: vetor x, bidimensional e de números reais, e variável 
float a, que representa a inclinação da reta que passa pela origem*/
/*Saída: vetor y, bidimensional e de números reais, que é a projeção 
de x em torno da reta de inclinação a*/

INÍCIO
    y <- matrizNula(2,1)
    y(1) <- x(1)/(1+a^2) + x(2)*a/(1+a^2)
    y(2) <- x(1)*a/(1+a^2) + x(2)*a^2/(1+a^2)

    Se abs(y(1)) < 10^(-6) Então      //correção
        y(1) <- 0
    Se abs(y(2)) < 10^(-6) Então      //correção
        y(2) <- 0
FIM

/*projeçãoR2*/
/*ALGORITMO QUE RECEBE COMO ENTRADAS UM VETOR BIDIMENSIONAL E UM ÂN-
GULO EM RADIANOS, E A ROTAÇÃO DO VETOR DE ENTRADA POR ESSE ÂNGULO.*/

/*Entradas: vetor x, bidimensional e de números reais, e variável 
float t, que representa o ângulo de rotação em radianos*/
/*Saída: vetor y, bidimensional e de números reais, que é a rotação 
de x em torno do ângulo t*/

INÍCIO
    y <- matrizNula(2,1)
    y(1) <- x(1)*cos(t) - x(2)*sin(t)
    y(2) <- x(1)*sin(t) + x(2)*cos(t)

    Se abs(y(1)) < 10^(-6) Então      //correção
        y(1) <- 0
    Se abs(y(2)) < 10^(-6) Então      //correção
        y(2) <- 0
FIM

/*gram_schmidt*/
/*ALGORITMO QUE RECEBE UMA MATRIZ QUE POSSUI COMO LINHAS OS VETORES 
DE UMA BASE DE RN, N NATURAL, E RETORNA OUTRA MATRIZ QUE POSSUI COMO 
LINHAS OS VETORES DE UMA BASE ORTONORMAL DE RN.*/

/*Entrada: uma matriz de constantes x, com linhas linearmente inde-
pendentes*/
//Saída: uma matriz de constantes y, com linhas ortonormais
/*Variáveis auxiliares: variáveis inteiras m, que recebe o número de
linhas da matriz de entrada, e n, que recebe o número de colunas da
matriz de entrada*/

INÍCIO
    m <- numeroDeLinhas(x)
    n <- numeroDeColunas(x)

    Se typeof(x(1)) ~= CONSTANT Então
    INÍCIO
        y <- matrizNula(m,n)
    Senão
        y <- x

        De i <- 2 Até m Faça              //cria os vetores dois a dois ortogonais
        INÍCIO
            y(i,:) <- x(i,:)
            De j <- 1 Até i-1 Faça
                y(i,:) <- y(i,:) - ((y(j,:)*x(i,:)')/(y(j,:)*y(j,:)'))*y(j,:)
            De j <- 1 Até n Faça          //correção
                Se abs(y(i,j)) < 10^(-6) Então
                    y(i,j) <- 0
        FIM

        De k <- m Até 1 Decremento 1 Faça         //faz a normalização
            y(k,:) <- y(k,:)/((y(k,:)*y(k,:)')^(1/2))
    FIM

    Retorna(y)
FIM
