  /*Código Scilab*/  
    
    /*ÁLGEBRA LINEAR/GEOMETRIA ANALÍTICA*/


        function y = reflexãoR2(x,a)
        
        /*reflexão do vetor bidimensional x em torno da reta de inclinação a que passa pela origem*/

            try typeof(x(2)) == "constant"
                if typeof(x(1))~="constant" || typeof(x(2))~="constant" || typeof(a)~="constant" then
                    y = zeros(3,1)
                    y = return(y)
                else
                    try typeof(x(3)) == "constant" && typeof(a(2)) == "constant"
                        y = zeros(3,1)
                        y = return(y)
                    catch "Invalid index"
                        y = zeros(2,1)

                        y(1) = x(1)*(1-a^2)/(1+a^2) + x(2)*2*a/(1+a^2)
                        y(2) = x(1)*2*a/(1+a^2) - x(2)*(1-a^2)/(1+a^2)

                        if abs(y(1)) < 10^(-6) then
                            y(1) = 0
                        end
                        if abs(y(2)) < 10^(-6) then
                            y(2) = 0
                        end
                        y = return(y)
                    end
                end
            catch "Invalid index"
                y = zeros(3,1)
                y = return(y)
            end

        endfunction


        function y = projeçãoR2(x,a)
        
        /*projeção do vetor bidimensional x na reta de inclinação a que passa pela origem. Retorna um vetor
        bidimensional (projeção de x) ou um vetor nulo 3x1 em caso de erro.*/

            try typeof(x(2)) == "constant"
                if typeof(x(1))~="constant" || typeof(x(2))~="constant" || typeof(a)~="constant" then
                    y = zeros(3,1)
                    y = return(y)
                else
                    try typeof(x(3)) == "constant" || typeof(a(2)) == "constant"
                        y = zeros(3,1)
                        y = return(y)
                    catch "Invalid index"
                        y = zeros(2,1)

                        y(1) = x(1)/(1+a^2) + x(2)*a/(1+a^2)
                        y(2) = x(1)*a/(1+a^2) + x(2)*a^2/(1+a^2)

                        if abs(y(1)) < 10^(-6) then
                            y(1) = 0
                        end
                        if abs(y(2)) < 10^(-6) then
                            y(2) = 0
                        end
                        y = return(y)
                    end
                end
            catch "Invalid index"
                y = zeros(3,1)
                y = return(y)
            end

        endfunction


        function y = rotaçãoR2(x,t)
        
        /*rotação do vetor bidimensional x por um ângulo t em torno da origem.*/

            try typeof(x(2)) == "constant"
                if typeof(x(1))~="constant" || typeof(x(2))~="constant" || typeof(t)~="constant" then
                    y = zeros(3,1)
                    y = return(y)
                else
                    try typeof(x(3)) == "constant" || typeof(t(2)) == "constant"
                        y = zeros(3,1)
                        y = return(y)
                    catch "Invalid index"
                        y = zeros(2,1)

                        y(1) = x(1)*cos(t) - x(2)*sin(t)
                        y(2) = x(1)*sin(t) + x(2)*cos(t)

                        if abs(y(1)) < 10^(-6) then
                            y(1) = 0
                        end
                        if abs(y(2)) < 10^(-6) then
                            y(2) = 0
                        end
                        y = return(y)
                    end
                end
            catch "Invalid index"
                y = zeros(3,1)
                y = return(y)
            end

        endfunction


        function y = gram_schmidt(x)
        
        /*recebe uma matriz que possui como linhas os vetores de uma base de Rn, n natural, e retorna
        outra matriz que possui como linhas os vetores de uma base ortonormal de Rn.*/

            m = size(x,1)
            n = size(x,2)

            if typeof(x(1)) ~= "constant"  then
                y = zeros(m,n)
            else
                y = x

                for i = 2:m
                    y(i,:) = x(i,:)
                    for j = 1:i-1
                        y(i,:) = y(i,:) - ((y(j,:)*x(i,:)')/(y(j,:)*y(j,:)'))*y(j,:)
                    end
                    for j = 1:n
                        if abs(y(i,j)) < 10^(-6)  then
                            y(i,j) = 0
                        end
                    end
                end

                for k = m:-1:1
                    y(k,:) = y(k,:)/((y(k,:)*y(k,:)')^(1/2))
                end
            end

            y = return(y)
            
        endfunction

        
        function transforma_eixos(x,y,z,u,v)
        
        /*função que recebe como entrada um par ordenado x, um par ordenado y, um ângulo z em radianos (número puro) e duas strings u e v. A saída é uma mensagem de texto, que exibe
        a coordenada do ponto x em relação a um sistema de eixos ortogonal que foi rotacionado em torno da origem por um ângulo z e transladado até y ou em relação ao sistema de eixos
        original. A string u indica a orientação do sistema de eixos final (mesma orientação que o sistema de eixos inicial ou não) e a string v indica se a coordenada de x exibida na
        tela será em relação ao sistema de eixos inicial (v = "invertido") ou ao sistema de eixos final (v = "não_invertido")*/

            try typeof(x(2)) == 'constant' 
                try typeof(x(3)) == 'constant' 
                    disp("Insira um par ordenado como primeiro argumento.")
                catch "Invalid index"
                    if u == "mesma_orientação" then
                        if v == "invertido" then
                            w = zeros(2,1)
                            w(1) = x(1)*cos(z)-x(2)*sin(z)+y(1)
                            w(2) = x(1)*sin(z)+x(2)*cos(z)+y(2)
                            if abs(w(1)) < 10^(-6) then
                                w(1) = 0
                            end
                            if abs(w(2)) < 10^(-6) then
                                w(2) = 0
                            end
                            mprintf("Coordenada de x no sistema de eixos inicial: %i %i",w(1),w(2))
                        elseif v == "não_invertido" then
                            w = zeros(2,1)
                            w(1) = (x(1)-y(1))*cos(z)+(x(2)-y(2))*sin(z)
                            w(2) = -(x(1)-y(1))*sin(z)+(x(2)-y(2))*cos(z)
                            if abs(w(1)) < 10^(-6) then
                                w(1) = 0
                            end
                            if abs(w(2)) < 10^(-6) then
                                w(2) = 0
                            end
                            mprintf("Coordenada de x no sistema de eixos final: %i %i",w(1),w(2))
                        else
                            disp("Quinto argumento incorreto.")
                        end
                    elseif u == "orientação_oposta" then
                        if v == "invertido" then
                            w = zeros(2,1)
                            w(1) = x(1)*cos(z)+x(2)*sin(z)+y(1)
                            w(2) = x(1)*sin(z)-x(2)*cos(z)+y(2)
                            if abs(w(1)) < 10^(-6) then
                                w(1) = 0
                            end
                            if abs(w(2)) < 10^(-6) then
                                w(2) = 0
                            end
                            mprintf("Coordenada de x no sistema de eixos inicial: %i %i",w(1),w(2))
                        elseif v == "não_invertido" then
                            w = zeros(2,1)
                            w(1) = (x(1)-y(1))*cos(z)+(x(2)-y(2))*sin(z)
                            w(2) = (x(1)-y(1))*sin(z)-(x(2)-y(2))*cos(z)
                            if abs(w(1)) < 10^(-6) then
                                w(1) = 0
                            end
                            if abs(w(2)) < 10^(-6) then
                                w(2) = 0
                            end
                            mprintf("Coordenada de x no sistema de eixos final: %i %i",w(1),w(2))
                        else
                            disp("Quinto argumento incorreto.")
                        end
                    else
                        disp("Quarto argumento incorreto.")
                    end
                end
            catch "Invalid index"
                disp("Insira um par ordenado como primeiro argumento.")
            end
        endfunction


    /*GEOMETRIA ANALÍTICA*/

        
        function w = distânciaPontos(x,y)
        
            /*Função que retorna a distância entre dois pontos no espaço.*/
            try (typeof(x(2)) == "constant" || typeof(y(2)) == "constant") && (typeof(x(3)) == "constant" || typeof(y(3)) == "constant")
                w = ((x(1)-y(1))^2 + (x(2)-y(2))^2 + (x(3)-y(3))^2)^(1/2)
            catch "Invalid index"
                w = return("Insira ternos ordenados de numeros reais apenas.")
            end
            
        endfunction
        

        function distânciaPontoReta(x,y,z)
        
        /*Função que recebe um ponto (x) do espaço e duas matrizes de constantes que definem uma reta parametrizada, e retorna a distância entre o ponto e a reta.*/
            try (typeof(x(2)) == "constant" || typeof(y(2)) == "constant" || typeof(z(2)) == "constant") && (typeof(x(3)) == "constant" || typeof(y(3)) == "constant" || typeof(z(3)) == "constant")
                if abs(y(1)-x(1)) < 10^(-6) || abs(y(2)-x(2)) < 10^(-6) || abs(y(3)-x(3)) < 10^(-6) then

                    v = zeros(1,3)

                    if abs(y(1)-x(1)) < 10^(-6) then
                        v(1) = 1
                    elseif abs(y(2)-x(2)) < 10^(-6) then
                        v(2) = 1
                    else
                        v(3) = 1
                    end

                    if v(1) == 0 then
                        d = z(1)*(y(1)-x(1))
                    end
                    if v(2) == 0 then
                        d = d + z(2)*(y(2)-x(2))
                    end
                    if v(3) == 0 then
                        d = d + z(3)*(y(3)-x(3))
                    end
                    d = d/(z(1)^2+z(2)^2+z(3)^2)
                else
                    d = (z(1)*(y(1)-x(1))+z(2)*(y(2)-x(2))+z(3)*(y(3)-x(3)))/(z(1)^2+z(2)^2+z(3)^2)
                end

                if abs(d) < 10^(-6) then
                    w = ((x(1)-y(1))^2 + (x(2)-y(2))^2 + (x(3)-y(3))^2)^(1/2)
                    disp(w)
                else
                    w = ((x(1)-y(1)-z(1)*(-d))^2 + (x(2)-y(2)-z(2)*(-d))^2 + (x(3)-y(3)-z(3)*(-d))^2)^(1/2)
                    disp(w)
                end
            catch "Invalid index"
                disp("Insira ternos ordenados de numeros reais apenas.")
            end
            
        endfunction
